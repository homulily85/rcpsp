from enum import Enum


class NUMBER_OF_LITERAL(Enum):
    ZERO = 0
    ONE = 1
    TWO = 2
    THREE = 3
    FOUR = 4
    FIVE_TO_TEN = 5
    MORE_THAN_TEN = 11


class MaxSATModel:
    def __init__(self):
        self.number_of_variable = 0
        self.number_of_clause = 0
        self.number_of_PB_clause = 0
        self.number_of_consistency_clause = 0
        self.number_of_literal = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 11: 0}
        self.number_of_soft_clause = 0
        self.number_of_hard_clause = 0
        self.soft_clause: list[tuple[list[int], int]] = []
        self.hard_clause = []

    def get_new_var(self) -> int:
        self.number_of_variable += 1
        return self.number_of_variable

    def _modify_statistic(self, clause: list[int]) -> None:
        self.number_of_clause += 1
        if len(clause) > 10:
            self.number_of_literal[NUMBER_OF_LITERAL.MORE_THAN_TEN.value] += 1
        elif len(clause) > 4:
            self.number_of_literal[NUMBER_OF_LITERAL.FIVE_TO_TEN.value] += 1
        else:
            self.number_of_literal[len(clause)] += 1

    def add_soft_clause(self, clause: list[int], weight: int) -> None:
        self.soft_clause.append((clause, weight))
        self.number_of_soft_clause += 1
        self._modify_statistic(clause)

    def add_hard_clause(self, clause: list[int]) -> None:
        self.hard_clause.append(clause)
        self.number_of_hard_clause += 1
        self._modify_statistic(clause)

    def export(self, filename: str) -> None:
        """
        Export the MaxSAT model to a WCNF file.

        Args:
            filename: The name of the file to write to.
        """
        with open(filename, 'a+') as f:
            # Write header information as comments
            f.write(f"c WCNF file generated by MaxSATModel\n")
            f.write(f"c Number of variables: {self.number_of_variable}\n")
            f.write(f"c Number of hard clauses: {self.number_of_hard_clause}\n")
            f.write(f"c Number of soft clauses: {self.number_of_soft_clause}\n")

            # Write hard clauses first
            for clause in self.hard_clause:
                f.write("h " + " ".join(map(str, clause)) + " 0\n")

            # Write soft clauses with their weights
            for clause, weight in self.soft_clause:
                f.write(f"{weight} " + " ".join(map(str, clause)) + " 0\n")
